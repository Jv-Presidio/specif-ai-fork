name: Build Marketplace

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  build_marketplace:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Get AWS account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_OUTPUT
          echo "::add-mask::${AWS_ACCOUNT_ID}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0

      - name: Build and Push Marketplace Image
        run: |
          VERSION="${{ inputs.version }}"
          IMAGE_NAME="hai-build-unified-image"
          BUILD_ENV="build:prod"
          MARKETPLACE_IMAGE_TAG="${VERSION}"

          echo "Building Docker image for Marketplace version: $VERSION"

          # Build Docker image
          docker build --build-arg BUILD_ENV=$BUILD_ENV --no-cache --progress=plain -t ${IMAGE_NAME}:$MARKETPLACE_IMAGE_TAG .

          # Scan Docker image for vulnerabilities
          trivy image ${IMAGE_NAME}:$MARKETPLACE_IMAGE_TAG

          # Authenticate with AWS Marketplace ECR
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_MARKETPLACE_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

          # Tag and push the image
          docker tag ${IMAGE_NAME}:$MARKETPLACE_IMAGE_TAG ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.PRODUCT_NAME }}/${{ secrets.REPO_NAME }}:$MARKETPLACE_IMAGE_TAG
          docker push ${{ secrets.AWS_MARKETPLACE_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.PRODUCT_NAME }}/${{ secrets.REPO_NAME }}:$MARKETPLACE_IMAGE_TAG

          # Cleanup unused Docker images
          docker image prune -af --filter "until=2h"
