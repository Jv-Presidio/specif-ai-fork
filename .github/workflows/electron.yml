name: Build Electron Applications

on:
  workflow_call:
    inputs:
      workflow_type:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ inputs.version }}
      is_release: ${{ steps.set-env.outputs.is_release }}
    steps:
      - name: Determine environment and release type
        id: set-env
        run: |
          if [[ "${{ inputs.workflow_type }}" == "release" ]]; then
            echo "environment=github-production" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Production release v${{ inputs.version }}"
          else
            echo "environment=github-specifai-development" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Development build v${{ inputs.version }}"
          fi

  build_electron_windows:
    needs: [determine_environment]
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ui electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:win

      - name: Package Windows Build
        run: |
          cd electron
          $VERSION = (node -e "console.log(require('./package.json').version);" | Out-String).Trim()
          Compress-Archive -Path dist/win-unpacked/* -DestinationPath win-unpacked.zip

          # Upload to S3 for long-term storage
          aws s3 cp win-unpacked.zip s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment  }}/windows/$VERSION/win-unpacked.zip

      - name: Upload Windows Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-electron-build
          path: electron/win-unpacked.zip
          retention-days: 90

  build_electron_mac:
    needs: [determine_environment]
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      intel_dmg_name: ${{ steps.set_output_names.outputs.intel_dmg_name }}
      arm_dmg_name: ${{ steps.set_output_names.outputs.arm_dmg_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Fetch Apple Developer Certificate
        run: |
          CSC_DATA=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.APPLE_CSC_SECRET_NAME }} --query SecretString --output text)
          echo "::add-mask::$CSC_DATA"
          # Extract credentials and mask them
          CSC_LINK=$(echo $CSC_DATA | jq -r '.CSC_LINK')
          CSC_KEY_PASSWORD=$(echo $CSC_DATA | jq -r '.CSC_KEY_PASSWORD')

          # Mask sensitive values before setting them as environment variables
          echo "::add-mask::$CSC_LINK"
          echo "::add-mask::$CSC_KEY_PASSWORD"

          # Set the masked values as environment variables
          echo "CSC_LINK=$CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:mac

      - name: Package and Upload to S3
        id: package_and_upload
        run: |
          cd electron
          VERSION=$(node -e "console.log(require('./package.json').version);")

          # Get DMG file paths
          INTEL_DMG=$(find dist -name "*.dmg" -not -name "*arm*.dmg" -type f)
          ARM_DMG=$(find dist -name "*arm*.dmg" -type f)
          echo "::add-mask::$INTEL_DMG"
          echo "::add-mask::$ARM_DMG"
          echo "INTEL_DMG=$INTEL_DMG" >> $GITHUB_ENV
          echo "ARM_DMG=$ARM_DMG" >> $GITHUB_ENV
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")

          # Upload to S3 for long-term storage
          aws s3 cp "$INTEL_DMG" "s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment }}/darwin/$VERSION/intel/$INTEL_FILENAME"
          aws s3 cp "$ARM_DMG" "s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment }}/darwin/$VERSION/arm64/$ARM_FILENAME"

          # Create directory for artifacts
          mkdir -p macos-builds

          # Copy DMG files to the artifacts directory
          cp "$INTEL_DMG" macos-builds/
          cp "$ARM_DMG" macos-builds/

      - name: Upload macOS Intel Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: electron/${{ env.INTEL_DMG }}
          retention-days: 90

      - name: Upload macOS ARM64 Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-build
          path: electron/${{ env.ARM_DMG }}
          retention-days: 90

      - name: Set output file names
        id: set_output_names
        run: |
          cd electron
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")
          echo "intel_dmg_name=$INTEL_FILENAME" >> $GITHUB_OUTPUT
          echo "arm_dmg_name=$ARM_FILENAME" >> $GITHUB_OUTPUT

  send_notification:
    needs: [build_electron_mac, build_electron_windows, determine_environment]
    if: success()
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Artifact Download Links
        id: generate-links
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Getting artifact IDs..."
          WINDOWS_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="windows-electron-build") | .id')
          MACOS_INTEL_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-intel-build") | .id')
          MACOS_ARM64_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-arm64-build") | .id')

          # Generate URLs
          WINDOWS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${WINDOWS_ARTIFACT_ID}"
          MACOS_INTEL_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_INTEL_ARTIFACT_ID}"
          MACOS_ARM64_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_ARM64_ARTIFACT_ID}"

          # Store URLs in environment variables
          echo "::add-mask::$WINDOWS_URL"
          echo "::add-mask::$MACOS_INTEL_URL"
          echo "::add-mask::$MACOS_ARM64_URL"
          echo "WINDOWS_URL=$WINDOWS_URL" >> $GITHUB_ENV
          echo "MACOS_INTEL_URL=$MACOS_INTEL_URL" >> $GITHUB_ENV
          echo "MACOS_ARM64_URL=$MACOS_ARM64_URL" >> $GITHUB_ENV

          echo "✅ Windows Artifact URL: $WINDOWS_URL"
          echo "✅ macOS Intel Artifact URL: $MACOS_INTEL_URL"
          echo "✅ macOS ARM64 Artifact URL: $MACOS_ARM64_URL"

      - name: Send Development Release Notification
        if: needs.determine_environment.outputs.is_release != 'true' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTIFICATION_URL: ${{ secrets.MS_TEAMS_DEV_CHANNEL_WEBHOOK_URL }}
          BUILD_VERSION: ${{ needs.determine_environment.outputs.version }}
        run: |
          # Get artifact IDs for download links
          WINDOWS_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="windows-electron-build") | .id')
          MACOS_INTEL_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-intel-build") | .id')
          MACOS_ARM64_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-arm64-build") | .id')

          WINDOWS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${WINDOWS_ARTIFACT_ID}"
          MACOS_INTEL_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_INTEL_ARTIFACT_ID}"
          MACOS_ARM64_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_ARM64_ARTIFACT_ID}"

          # Get commit details
          COMMIT_SHA=${{ github.sha }}
          COMMIT_SHORT_SHA=${COMMIT_SHA:0:7}

          # Get commit message, author and timestamp (IST - UTC+5:30)
          COMMIT_MSG=$(git log -1 --pretty=format:"%s" $COMMIT_SHA)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" $COMMIT_SHA)
          TIMESTAMP=$(TZ=":Asia/Kolkata" date "+%d-%b-%Y %I:%M %p IST")

          # Prepare the simple notification with download links and commit info
          curl -X POST -H 'Content-type: application/json' --data "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"version\": \"1.5\",
                  \"body\": [
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"✅ Development Build Successful\",
                      \"weight\": \"Bolder\",
                      \"size\": \"Medium\"
                    },
                    {
                      \"type\": \"FactSet\",
                      \"facts\": [
                        {
                          \"title\": \"Version\",
                          \"value\": \"v${BUILD_VERSION}\"
                        },
                        {
                          \"title\": \"Built at\",
                          \"value\": \"$TIMESTAMP\"
                        },
                        {
                          \"title\": \"Commit\",
                          \"value\": \"${COMMIT_SHORT_SHA} - ${COMMIT_MSG}\"
                        },
                        {
                          \"title\": \"Author\",
                          \"value\": \"$COMMIT_AUTHOR\"
                        }
                      ]
                    },
                    {
                      \"type\": \"ActionSet\",
                      \"actions\": [
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"Windows Build\",
                          \"url\": \"$WINDOWS_URL\"
                        },
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"Mac Intel Build\",
                          \"url\": \"$MACOS_INTEL_URL\"
                        },
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"Mac ARM64 Build\",
                          \"url\": \"$MACOS_ARM64_URL\"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }" $NOTIFICATION_URL

  create_release:
    needs:
      [
        send_notification,
        determine_environment,
        build_electron_windows,
        build_electron_mac,
      ]
    if: needs.determine_environment.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-electron-build
          path: release-assets/windows

      - name: Download macOS Intel Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-intel-build
          path: release-assets/macos-intel

      - name: Download macOS ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64-build
          path: release-assets/macos-arm64

      - name: Rename files with consistent naming convention
        run: |
          VERSION="${{ needs.determine_environment.outputs.version }}"
          echo "Creating consistently named assets for version $VERSION"

          # Create directory for renamed files
          mkdir -p renamed-assets

          # Rename Windows artifact
          WIN_ZIP=$(find release-assets/windows -name "*.zip" -type f | head -1)
          if [[ -n "$WIN_ZIP" ]]; then
            cp "$WIN_ZIP" "renamed-assets/Specif.AI-${VERSION}-windows.zip"
            echo "✅ Created Windows artifact: Specif.AI-${VERSION}-windows.zip"
          else
            echo "❌ No Windows zip file found"
          fi

          # Rename macOS Intel artifact
          MAC_INTEL_DMG=$(find release-assets/macos-intel -name "*.dmg" -type f | head -1)
          if [[ -n "$MAC_INTEL_DMG" ]]; then
            cp "$MAC_INTEL_DMG" "renamed-assets/Specif.AI-${VERSION}-mac-intel.dmg"
            echo "✅ Created macOS Intel artifact: Specif.AI-${VERSION}-mac-intel.dmg"
          else
            echo "❌ No macOS Intel DMG file found"
          fi

          # Rename macOS ARM artifact
          MAC_ARM_DMG=$(find release-assets/macos-arm64 -name "*.dmg" -type f | head -1)
          if [[ -n "$MAC_ARM_DMG" ]]; then
            cp "$MAC_ARM_DMG" "renamed-assets/Specif.AI-${VERSION}-mac-arm64.dmg"
            echo "✅ Created macOS ARM64 artifact: Specif.AI-${VERSION}-mac-arm64.dmg"
          else
            echo "❌ No macOS ARM64 DMG file found"
          fi

          echo "📦 Final release assets:"
          ls -la renamed-assets/

      - name: Modify Changelog
        run: |
          VERSION="${{ needs.determine_environment.outputs.version }}"
          CHANGELOG_CONTENT=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
          echo "$CHANGELOG_CONTENT" > CHANGELOG-MOD.md

      - name: Create Release with Assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ needs.determine_environment.outputs.version }}
          name: Release v${{ needs.determine_environment.outputs.version }}
          draft: true
          files: |
            release-assets/*
          body_path: CHANGELOG-MOD.md
          fail_on_unmatched_files: false

      - name: Send Production Release Notification
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTIFICATION_URL: ${{ secrets.MS_TEAMS_PROD_CHANNEL_WEBHOOK_URL }}
          BUILD_VERSION: ${{ needs.determine_environment.outputs.version }}
        run: |
          echo "Preparing release notification for v${BUILD_VERSION}"

          # Get artifact IDs for download links
          WINDOWS_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="windows-electron-build") | .id')
          MACOS_INTEL_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-intel-build") | .id')
          MACOS_ARM64_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-arm64-build") | .id')

          WINDOWS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${WINDOWS_ARTIFACT_ID}"
          MACOS_INTEL_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_INTEL_ARTIFACT_ID}"
          MACOS_ARM64_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_ARM64_ARTIFACT_ID}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/v${BUILD_VERSION}"

          # Make sure we have artifact URLs
          if [[ -z "$WINDOWS_ARTIFACT_ID" || "$WINDOWS_ARTIFACT_ID" == "null" ]]; then
            echo "⚠️ WARNING: Windows artifact ID not found"
          else
            echo "✅ Windows artifact URL: $WINDOWS_URL"
          fi

          # Fetch random celebration GIF
          RANDOM_GIF=$(curl -s "https://api.giphy.com/v1/gifs/random?api_key=${{secrets.GIPHY_API_KEY}}&tag=celebration+success&rating=g" | jq -r '.data.images.original.webp')

          # Using sed instead of awk to process the changelog sections
          echo "Processing changelog using sed..."

          # Create a temporary file to store the processed changelog
          TEMP_CHANGELOG=$(mktemp)

          # Extract each section from the changelog
          SECTION_TITLES=$(grep "^### " CHANGELOG-MOD.md | sed 's/^### //')

          # Initialize the formatted changelog
          FORMATTED_CHANGELOG=""

          # Process each section
          for SECTION in $SECTION_TITLES; do
            echo "Processing section: $SECTION"
            
            # Create pattern for this section header
            SECTION_PATTERN="### $SECTION"
            
            # Create a numbered temporary file with the specific section content
            SECTION_FILE=$(mktemp)
            
            # Extract content between this section and the next section
            sed -n "/^${SECTION_PATTERN}$/,/^### /p" CHANGELOG-MOD.md | 
              sed "1d;/^### /d" > "$SECTION_FILE"
            
            # Skip empty sections
            if [[ ! -s "$SECTION_FILE" ]]; then
              echo "  - Section is empty, skipping"
              rm "$SECTION_FILE"
              continue
            fi
            
            # Add section header with extra spacing
            SECTION_MARKDOWN="**${SECTION}**\\n\\n"
            
            # Process each line in the section
            while IFS= read -r LINE; do
              # Skip empty lines
              if [[ -z "$LINE" ]]; then
                continue
              fi
              
              # Format bullet points with extra spacing
              if [[ "$LINE" =~ ^-\ .*$ ]]; then
                # Replace "- " with bullet points and add extra newline
                FORMATTED_LINE="• ${LINE:2}"
                SECTION_MARKDOWN="${SECTION_MARKDOWN}${FORMATTED_LINE}\\n\\n"
              else
                # Add extra newline for non-bullet points
                SECTION_MARKDOWN="${SECTION_MARKDOWN}${LINE}\\n\\n"
              fi
            done < "$SECTION_FILE"
            
            # Add section with extra spacing between sections
            FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}${SECTION_MARKDOWN}\\n\\n\\n"
            
            # Clean up the section file
            rm "$SECTION_FILE"
          done

          # Debug: Check what we got
          echo "Formatted changelog length: ${#FORMATTED_CHANGELOG}"
          echo "Formatted changelog preview: ${FORMATTED_CHANGELOG:0:100}..."

          # If for some reason we still don't have a changelog, create a simple one
          if [[ -z "$FORMATTED_CHANGELOG" ]]; then
            echo "WARNING: Failed to extract changelog sections, using a simplified approach"
            # Simplified changelog extraction with proper spacing
            FORMATTED_CHANGELOG=$(cat CHANGELOG-MOD.md | 
              sed 's/^### /***/g' | 
              sed 's/^- /• /g' | 
              tr '\n' ' ' | 
              sed 's/ \+/ /g' | 
              sed 's/\*/\\n\\n**/g')
          fi

          # Escape double quotes and other special chars
          FORMATTED_CHANGELOG=$(echo "$FORMATTED_CHANGELOG" | sed 's/"/\\"/g')

          # Make sure notification URL is set
          if [[ -z "$NOTIFICATION_URL" ]]; then
            echo "❌ ERROR: NOTIFICATION_URL is not set."
            exit 1
          fi

          # Prepare the notification with UI components
          curl -X POST -H 'Content-type: application/json' --data "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"version\": \"1.5\",
                  \"body\": [
                    {
                      \"type\": \"ColumnSet\",
                      \"columns\": [
                        {
                          \"type\": \"Column\",
                          \"width\": \"auto\",
                          \"items\": [
                            {
                              \"type\": \"Image\",
                              \"url\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\",
                              \"size\": \"Small\",
                              \"style\": \"Person\"
                            }
                          ]
                        },
                        {
                          \"type\": \"Column\",
                          \"width\": \"stretch\",
                          \"items\": [
                            {
                              \"type\": \"TextBlock\",
                              \"text\": \"Release Announcement\",
                              \"size\": \"Medium\",
                              \"weight\": \"Bolder\"
                            },
                            {
                              \"type\": \"TextBlock\",
                              \"text\": \"Specifai v${BUILD_VERSION}\",
                              \"size\": \"Small\",
                              \"isSubtle\": true
                            }
                          ]
                        }
                      ]
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"🎉 A new release is ready for download!\",
                      \"wrap\": true,
                      \"size\": \"Medium\"
                    },
                    {
                      \"type\": \"Image\",
                      \"url\": \"$RANDOM_GIF\",
                      \"horizontalAlignment\": \"center\",
                      \"size\": \"Large\"
                    },
                    {
                      \"type\": \"FactSet\",
                      \"facts\": [
                        {
                          \"title\": \"Version\",
                          \"value\": \"v${BUILD_VERSION}\"
                        },
                        {
                          \"title\": \"Built at\",
                          \"value\": \"$TIMESTAMP\"
                        },
                      ]
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"**What's New**\",
                      \"wrap\": true,
                      \"weight\": \"Bolder\",
                      \"size\": \"Medium\"
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"${FORMATTED_CHANGELOG}\",
                      \"wrap\": true,
                      \"isSubtle\": false,
                      \"separator\": true,
                      \"spacing\": \"Large\"
                    },
                    {
                      \"type\": \"ActionSet\",
                      \"actions\": [
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"Windows Download\",
                          \"url\": \"$WINDOWS_URL\",
                          \"iconUrl\": \"https://cdn-icons-png.flaticon.com/512/888/888882.png\"
                        },
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"macOS Intel\",
                          \"url\": \"$MACOS_INTEL_URL\",
                          \"iconUrl\": \"https://cdn-icons-png.flaticon.com/512/2/2235.png\"
                        },
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"macOS ARM64\",
                          \"url\": \"$MACOS_ARM64_URL\",
                          \"iconUrl\": \"https://cdn-icons-png.flaticon.com/512/2/2235.png\"
                        },
                        {
                          \"type\": \"Action.OpenUrl\",
                          \"title\": \"Full Release Notes\",
                          \"url\": \"$RELEASE_URL\",
                          \"iconUrl\": \"https://cdn-icons-png.flaticon.com/512/25/25284.png\"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }" $NOTIFICATION_URL
