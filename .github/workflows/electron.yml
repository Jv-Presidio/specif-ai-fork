name: Build Electron Applications

on:
  workflow_run:
    workflows: ["Deploy Frontend and Backend"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-env.outputs.version }}
      is_release: ${{ steps.set-env.outputs.is_release }}
    steps:
      - name: Determine environment from commit message
        id: set-env
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ Prepare\ for\ release\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Detected production release v${BASH_REMATCH[1]}"
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Detected development build"
          fi

  # Windows Electron Build
  build_electron_windows:
    needs: [determine_environment]
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Set Environment Variables
        id: set-env-vars
        run: |
          # Set variables based on environment
          if ("${{ needs.determine_environment.outputs.environment }}" -eq "production") {
              $electronS3Bucket="${{ secrets.PROD_ELECTRON_S3_BUCKET }}"
              $appUrl="${{ secrets.PROD_APP_URL }}"
          } else {
              $electronS3Bucket="${{ secrets.DEV_ELECTRON_S3_BUCKET }}"
              $appUrl="${{ secrets.DEV_APP_URL }}"
          }

          echo "ELECTRON_S3_BUCKET=$electronS3Bucket" >> $env:GITHUB_OUTPUT
          echo "APP_URL=$appUrl" >> $env:GITHUB_OUTPUT

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ui electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          echo "APP URL - ${{ steps.set-env-vars.outputs.APP_URL }}"
          npm run package:win

      - name: Package and Upload to S3
        run: |
          cd electron
          $VERSION = (node -e "console.log(require('./package.json').version);" | Out-String).Trim()
          Compress-Archive -Path dist/win-unpacked/* -DestinationPath win-unpacked.zip
          aws s3 cp win-unpacked.zip s3://${{ steps.set-env-vars.outputs.ELECTRON_S3_BUCKET }}/${{ github.ref_name }}/windows/$VERSION/win-unpacked.zip

  # macOS Electron Build
  build_electron_mac:
    needs: [determine_environment]
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Set Environment Variables
        id: set-env-vars
        run: |
          # Set variables based on environment
          if [[ "${{ needs.determine_environment.outputs.environment }}" == "production" ]]; then
              ELECTRON_S3_BUCKET="${{ secrets.PROD_ELECTRON_S3_BUCKET }}"
              APP_URL="${{ secrets.PROD_APP_URL }}"
          else
              ELECTRON_S3_BUCKET="${{ secrets.DEV_ELECTRON_S3_BUCKET }}"
              APP_URL="${{ secrets.DEV_APP_URL }}"
          fi

          echo "ELECTRON_S3_BUCKET=$ELECTRON_S3_BUCKET" >> $GITHUB_OUTPUT
          echo "APP_URL=$APP_URL" >> $GITHUB_OUTPUT

      - name: Fetch Apple Developer Certificate
        run: |
          CSC_DATA=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.APPLE_CSC_SECRET_NAME }} --query SecretString --output text)
          echo "::add-mask::$CSC_DATA"
          # Extract credentials and mask them
          CSC_LINK=$(echo $CSC_DATA | jq -r '.CSC_LINK')
          CSC_KEY_PASSWORD=$(echo $CSC_DATA | jq -r '.CSC_KEY_PASSWORD')

          # Mask sensitive values before setting them as environment variables
          echo "::add-mask::$CSC_LINK"
          echo "::add-mask::$CSC_KEY_PASSWORD"

          # Set the masked values as environment variables
          echo "CSC_LINK=$CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:mac

      - name: Package and Upload to S3
        run: |
          cd electron
          VERSION=$(node -e "console.log(require('./package.json').version);")

          # Get DMG file paths
          INTEL_DMG=$(find dist -name "*.dmg" -not -name "*arm*.dmg" -type f)
          ARM_DMG=$(find dist -name "*arm*.dmg" -type f)
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")

          # Upload to S3
          aws s3 cp "$INTEL_DMG" "s3://${{ env.ELECTRON_S3_BUCKET }}/${{ github.ref_name }}/darwin/$VERSION/intel/$INTEL_FILENAME"
          aws s3 cp "$ARM_DMG" "s3://${{ env.ELECTRON_S3_BUCKET }}/${{ github.ref_name }}/darwin/$VERSION/arm64/$ARM_FILENAME"
