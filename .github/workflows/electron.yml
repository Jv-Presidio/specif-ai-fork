name: Build Electron Applications

on:
  workflow_call:
    inputs:
      workflow_type:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ inputs.version }}
      is_release: ${{ steps.set-env.outputs.is_release }}
    steps:
      - name: Determine environment and release type
        id: set-env
        run: |
          if [[ "${{ inputs.workflow_type }}" == "release" ]]; then
            echo "environment=github-production" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Production release v${{ inputs.version }}"
          else
            echo "environment=github-development" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Development build v${{ inputs.version }}"
          fi

  build_electron_windows:
    needs: [determine_environment]
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ui electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:win

      - name: Package Windows Build
        run: |
          cd electron
          $VERSION = (node -e "console.log(require('./package.json').version);" | Out-String).Trim()
          Compress-Archive -Path dist/win-unpacked/* -DestinationPath win-unpacked.zip

          # Upload to S3 for long-term storage
          aws s3 cp win-unpacked.zip s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment  }}/windows/$VERSION/win-unpacked.zip

      - name: Upload Windows Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-electron-build
          path: electron/win-unpacked.zip
          retention-days: 90

  build_electron_mac:
    needs: [determine_environment]
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      intel_dmg_name: ${{ steps.set_output_names.outputs.intel_dmg_name }}
      arm_dmg_name: ${{ steps.set_output_names.outputs.arm_dmg_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Fetch Apple Developer Certificate
        run: |
          CSC_DATA=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.APPLE_CSC_SECRET_NAME }} --query SecretString --output text)
          echo "::add-mask::$CSC_DATA"
          # Extract credentials and mask them
          CSC_LINK=$(echo $CSC_DATA | jq -r '.CSC_LINK')
          CSC_KEY_PASSWORD=$(echo $CSC_DATA | jq -r '.CSC_KEY_PASSWORD')

          # Mask sensitive values before setting them as environment variables
          echo "::add-mask::$CSC_LINK"
          echo "::add-mask::$CSC_KEY_PASSWORD"

          # Set the masked values as environment variables
          echo "CSC_LINK=$CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:mac

      - name: Package and Upload to S3
        id: package_and_upload
        run: |
          cd electron
          VERSION=$(node -e "console.log(require('./package.json').version);")

          # Get DMG file paths
          INTEL_DMG=$(find dist -name "*.dmg" -not -name "*arm*.dmg" -type f)
          ARM_DMG=$(find dist -name "*arm*.dmg" -type f)
          echo "::add-mask::$INTEL_DMG"
          echo "::add-mask::$ARM_DMG"
          echo "INTEL_DMG=$INTEL_DMG" >> $GITHUB_ENV
          echo "ARM_DMG=$ARM_DMG" >> $GITHUB_ENV
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")

          # Upload to S3 for long-term storage
          aws s3 cp "$INTEL_DMG" "s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment }}/darwin/$VERSION/intel/$INTEL_FILENAME"
          aws s3 cp "$ARM_DMG" "s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment }}/darwin/$VERSION/arm64/$ARM_FILENAME"

          # Create directory for artifacts
          mkdir -p macos-builds

          # Copy DMG files to the artifacts directory
          cp "$INTEL_DMG" macos-builds/
          cp "$ARM_DMG" macos-builds/

      - name: Upload macOS Intel Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: electron/${{ env.INTEL_DMG }}
          retention-days: 90

      - name: Upload macOS ARM64 Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-build
          path: electron/${{ env.ARM_DMG }}
          retention-days: 90

      - name: Set output file names
        id: set_output_names
        run: |
          cd electron
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")
          echo "intel_dmg_name=$INTEL_FILENAME" >> $GITHUB_OUTPUT
          echo "arm_dmg_name=$ARM_FILENAME" >> $GITHUB_OUTPUT

  send_notification:
    needs: [build_electron_mac, build_electron_windows, determine_environment]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Changelog Content
        if: needs.determine_environment.outputs.is_release == 'true'
        id: changelog
        run: |
          VERSION="${{ needs.determine_environment.outputs.version }}"
          CHANGELOG_CONTENT=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//'%'/'%25'}"
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\n'/'%0A'}"
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\r'/'%0D'}"
          echo "content=$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
      - name: Generate Artifact Download Links
        id: generate-links
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Getting artifact IDs..."
          WINDOWS_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="windows-electron-build") | .id')
          MACOS_INTEL_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-intel-build") | .id')
          MACOS_ARM64_ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[] | select(.name=="macos-arm64-build") | .id')

          # Generate URLs
          WINDOWS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${WINDOWS_ARTIFACT_ID}"
          MACOS_INTEL_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_INTEL_ARTIFACT_ID}"
          MACOS_ARM64_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${MACOS_ARM64_ARTIFACT_ID}"

          # Store URLs in environment variables
          echo "::add-mask::$WINDOWS_URL"
          echo "::add-mask::$MACOS_INTEL_URL"
          echo "::add-mask::$MACOS_ARM64_URL"
          echo "WINDOWS_URL=$WINDOWS_URL" >> $GITHUB_ENV
          echo "MACOS_INTEL_URL=$MACOS_INTEL_URL" >> $GITHUB_ENV
          echo "MACOS_ARM64_URL=$MACOS_ARM64_URL" >> $GITHUB_ENV

          echo "âœ… Windows Artifact URL: $WINDOWS_URL"
          echo "âœ… macOS Intel Artifact URL: $MACOS_INTEL_URL"
          echo "âœ… macOS ARM64 Artifact URL: $MACOS_ARM64_URL"

      # Update Development notification with download links
      - name: Update Development Teams notification
        if: needs.determine_environment.outputs.is_release != 'true' && success()
        uses: toko-bifrost/ms-teams-deploy-card@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          card-layout-exit: complete
          show-on-start: false
          show-on-exit: true
          timezone: "Asia/Kolkata"
          enable-view-status-action: false
          enable-review-diffs-action: false
          custom-actions: |
            - text: Mac ARM64 Build
              url: "${{env.MACOS_ARM64_URL}}"
            - text: Mac Intel Build
              url: "${{env.MACOS_INTEL_URL}}"
            - text: Windows Build
              url: "${{env.WINDOWS_URL}}"

      # Update Production notification with download links and changelog
      - name: Update Production Teams notification
        if: needs.determine_environment.outputs.is_release == 'true' && success()
        uses: toko-bifrost/ms-teams-deploy-card@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          card-layout-exit: complete
          show-on-start: false
          show-on-exit: true
          timezone: "Asia/Kolkata"
          enable-view-status-action: false
          enable-review-diffs-action: false
          custom-facts: |
            - name: Version
              value: ${{ needs.determine_environment.outputs.version }}
            - name: Changes
              value: ${{ steps.changelog.outputs.content }}
          custom-actions: |
            - text: Mac ARM64 Build
              url: "${{env.MACOS_ARM64_URL}}"
            - text: Mac Intel Build
              url: "${{env.MACOS_INTEL_URL}}"
            - text: Windows Build
              url: "${{env.WINDOWS_URL}}"

  create_release:
    needs: [send_notification, determine_environment]
    if: needs.determine_environment.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.determine_environment.outputs.version }}"
          CHANGELOG=$(awk -v ver="## [$VERSION]" '
            $0 ~ ver {p=1;next}
            /^## \[/ {p=0}
            p {print}
          ' CHANGELOG.md)

          gh release create v$VERSION \
            --draft \
            --title "Release v$VERSION" \
            --notes "$CHANGELOG"
