name: Build Electron Applications

on:
  workflow_run:
    workflows: ["Deploy Frontend and Backend"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      release-type:
        description: "Choose release type"
        required: true
        default: "pre-release"
        type: choice
        options:
          - pre-release
          - release

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-env.outputs.version }}
      is_release: ${{ steps.set-env.outputs.is_release }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine environment and release type
        id: set-env
        run: |
          # For manual workflow with release input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.release-type }}" == "release" ]]; then
            # Get version from package.json
            VERSION=$(grep -m1 '"version":' electron/package.json | cut -d'"' -f4)
            echo "environment=github-production" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Manual production release v${VERSION}"
          # Development build
          else
            echo "environment=github-development" >> $GITHUB_OUTPUT
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Detected development build"
          fi

  # Windows Electron Build
  build_electron_windows:
    needs: [determine_environment]
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ui electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:win

      - name: Package and Upload to S3
        run: |
          cd electron
          $VERSION = (node -e "console.log(require('./package.json').version);" | Out-String).Trim()
          Compress-Archive -Path dist/win-unpacked/* -DestinationPath win-unpacked.zip
          aws s3 cp win-unpacked.zip s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment  }}/windows/$VERSION/win-unpacked.zip

  # macOS Electron Build
  build_electron_mac:
    needs: [determine_environment]
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      intel_dmg_name: ${{ steps.set_output_names.outputs.intel_dmg_name }}
      arm_dmg_name: ${{ steps.set_output_names.outputs.arm_dmg_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: electron/package-lock.json

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Fetch Apple Developer Certificate
        run: |
          CSC_DATA=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.APPLE_CSC_SECRET_NAME }} --query SecretString --output text)
          echo "::add-mask::$CSC_DATA"
          # Extract credentials and mask them
          CSC_LINK=$(echo $CSC_DATA | jq -r '.CSC_LINK')
          CSC_KEY_PASSWORD=$(echo $CSC_DATA | jq -r '.CSC_KEY_PASSWORD')

          # Mask sensitive values before setting them as environment variables
          echo "::add-mask::$CSC_LINK"
          echo "::add-mask::$CSC_KEY_PASSWORD"

          # Set the masked values as environment variables
          echo "CSC_LINK=$CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Display Debug Info
        run: |
          echo "Contents of dist/ui:"
          ls ui/dist/ui
          echo "Current working directory:"
          pwd

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron
          npm install
          npm run package:mac

      - name: Package and Upload to S3
        id: package_and_upload
        run: |
          cd electron
          VERSION=$(node -e "console.log(require('./package.json').version);")

          # Get DMG file paths
          INTEL_DMG=$(find dist -name "*.dmg" -not -name "*arm*.dmg" -type f)
          ARM_DMG=$(find dist -name "*arm*.dmg" -type f)
          echo "::add-mask::$INTEL_DMG"
          echo "::add-mask::$ARM_DMG"
          echo "INTEL_DMG=$INTEL_DMG" >> $GITHUB_ENV
          echo "ARM_DMG=$ARM_DMG" >> $GITHUB_ENV
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")

          # Upload to S3
          aws s3 cp "$INTEL_DMG" "s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment }}/darwin/$VERSION/intel/$INTEL_FILENAME"
          aws s3 cp "$ARM_DMG" "s3://${{ secrets.ELECTRON_S3_BUCKET }}/${{ needs.determine_environment.outputs.environment }}/darwin/$VERSION/arm64/$ARM_FILENAME"

      - name: Set output file names
        id: set_output_names
        run: |
          cd electron
          INTEL_FILENAME=$(basename "$INTEL_DMG")
          ARM_FILENAME=$(basename "$ARM_DMG")
          echo "intel_dmg_name=$INTEL_FILENAME" >> $GITHUB_OUTPUT
          echo "arm_dmg_name=$ARM_FILENAME" >> $GITHUB_OUTPUT

  get_artifact_urls:
    needs: [build_electron_mac, build_electron_windows, determine_environment]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      windows_url_encoded: ${{ steps.get-urls.outputs.windows_url_encoded }}
      macos_intel_url_encoded: ${{ steps.get-urls.outputs.macos_intel_url_encoded }}
      macos_arm64_url_encoded: ${{ steps.get-urls.outputs.macos_arm64_url_encoded }}
    steps:
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Generate presigned URLs
        id: get-urls
        run: |
          # Variables
          VERSION="${{ needs.determine_environment.outputs.version }}"
          ENV="${{ needs.determine_environment.outputs.environment }}"
          BUCKET="${{ secrets.ELECTRON_S3_BUCKET }}"
          INTEL_FILENAME="${{ needs.build_electron_mac.outputs.intel_dmg_name }}"
          ARM_FILENAME="${{ needs.build_electron_mac.outputs.arm_dmg_name }}"

          echo "Environment: $ENV"
          echo "Version: $VERSION"

          # Generate presigned URLs with 7-day expiry
          WINDOWS_URL=$(aws s3 presign "s3://$BUCKET/$ENV/windows/$VERSION/win-unpacked.zip" --expires-in 604800)
          echo "Generated Windows URL"

          if [ -n "$INTEL_FILENAME" ]; then
            MACOS_INTEL_URL=$(aws s3 presign "s3://$BUCKET/$ENV/darwin/$VERSION/intel/$INTEL_FILENAME" --expires-in 604800)
            echo "Generated macOS Intel URL for $INTEL_FILENAME"
          else
            MACOS_INTEL_URL="No Intel build available"
            echo "No Intel build available"
          fi

          if [ -n "$ARM_FILENAME" ]; then
            MACOS_ARM64_URL=$(aws s3 presign "s3://$BUCKET/$ENV/darwin/$VERSION/arm64/$ARM_FILENAME" --expires-in 604800)
            echo "Generated macOS ARM URL for $ARM_FILENAME"
          else
            MACOS_ARM64_URL="No ARM build available"
            echo "No ARM build available"
          fi

          # Base64 encode the URLs to prevent GitHub from marking them as secrets
          WINDOWS_URL_ENCODED=$(echo "$WINDOWS_URL" | base64 -w 0)
          MACOS_INTEL_URL_ENCODED=$(echo "$MACOS_INTEL_URL" | base64 -w 0)
          MACOS_ARM64_URL_ENCODED=$(echo "$MACOS_ARM64_URL" | base64 -w 0)

          # Output encoded values
          echo "windows_url_encoded=$WINDOWS_URL_ENCODED" >> $GITHUB_OUTPUT
          echo "macos_intel_url_encoded=$MACOS_INTEL_URL_ENCODED" >> $GITHUB_OUTPUT
          echo "macos_arm64_url_encoded=$MACOS_ARM64_URL_ENCODED" >> $GITHUB_OUTPUT

  send_notification:
    needs: [get_artifact_urls, determine_environment]
    if: success()
    runs-on: ubuntu-latest
    steps:
      # Add a step to decode the URLs first
      - name: Decode URLs
        id: decode-urls
        run: |
          # Decode base64 URLs
          WINDOWS_URL=$(echo "${{ needs.get_artifact_urls.outputs.windows_url_encoded }}" | base64 -d)
          MACOS_INTEL_URL=$(echo "${{ needs.get_artifact_urls.outputs.macos_intel_url_encoded }}" | base64 -d)
          MACOS_ARM64_URL=$(echo "${{ needs.get_artifact_urls.outputs.macos_arm64_url_encoded }}" | base64 -d)

          # Store decoded URLs in environment
          echo "WINDOWS_URL=$WINDOWS_URL" >> $GITHUB_ENV
          echo "MACOS_INTEL_URL=$MACOS_INTEL_URL" >> $GITHUB_ENV
          echo "MACOS_ARM64_URL=$MACOS_ARM64_URL" >> $GITHUB_ENV

      - name: Send Teams notification with Download Links
        uses: toko-bifrost/ms-teams-deploy-card@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          card-layout-exit: cozy
          show-on-start: false
          show-on-exit: true
          custom-facts: |
            - name: Environment
              value: ${{ needs.determine_environment.outputs.environment }}
            - name: Version
              value: ${{ needs.determine_environment.outputs.is_release == 'true' && format('v{0}', needs.determine_environment.outputs.version) || 'development' }}
            - name: Commit
              value: ${{ github.sha }}
            - name: Windows Build
              value: '[Download Windows]( ${{ env.WINDOWS_URL }} )'
            - name: macOS Intel Build
              value: '[Download macOS Intel]( ${{ env.MACOS_INTEL_URL}} )'
            - name: macOS ARM64 Build
              value: '[Download macOS ARM64]( ${{ env.MACOS_ARM64_URL }} )'
