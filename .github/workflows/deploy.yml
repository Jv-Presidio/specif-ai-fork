name: Deploy Frontend and Backend

on:
  workflow_call:
    inputs:
      workflow_type:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ inputs.version }}
      is_release: ${{ steps.set-env.outputs.is_release }}
    steps:
      - name: Determine environment and release type
        id: set-env
        run: |
          if [[ "${{ inputs.workflow_type }}" == "release" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Production release v${{ inputs.version }}"
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Development build v${{ inputs.version }}"
          fi

  # Frontend deployment job
  deploy_frontend:
    needs: [determine_environment]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Download Frontend Build
        uses: dawidd6/action-download-artifact@v2
        with:
          name: frontend-build
          workflow: build.yml
          workflow_conclusion: success
          path: ui/dist/ui/
          github_token: ${{ secrets.GH_PAT_WORKFLOW_ARTIFACTS }}

      - name: Deploy to S3 and Invalidate CloudFront Cache
        run: |
          # Set variables based on environment
          if [[ "${{ needs.determine_environment.outputs.environment }}" == "production" ]]; then
            S3_BUCKET="${{ secrets.PROD_S3_BUCKET }}"
            CLOUDFRONT_DISTRIBUTION_ID="${{ secrets.PROD_DISTRIBUTION_ID }}"
            echo "Deploying to production environment"
          else
            S3_BUCKET="${{ secrets.DEV_S3_BUCKET }}"
            CLOUDFRONT_DISTRIBUTION_ID="${{ secrets.DEV_DISTRIBUTION_ID }}"
            echo "Deploying to development environment"
          fi

          # Deploy to S3
          aws s3 sync ui/dist/ui/ s3://$S3_BUCKET --delete

          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

  # Backend deployment job
  deploy_backend:
    needs: [determine_environment]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION  }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup deployment variables
        id: deploy-vars
        run: |
          # Set variables based on environment
          if [[ "${{ needs.determine_environment.outputs.environment }}" == "production" ]]; then
            echo "SERVER=${{ secrets.PROD_SERVER_IP }}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME=${{ secrets.PROD_IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "APP_PASSCODE_KEY=${{ secrets.PROD_APP_PASSCODE_KEY }}" >> $GITHUB_OUTPUT
            echo "DEFAULT_API_PROVIDER=${{ secrets.PROD_DEFAULT_API_PROVIDER }}" >> $GITHUB_OUTPUT
            echo "DEFAULT_MODEL=${{ secrets.PROD_DEFAULT_MODEL }}" >> $GITHUB_OUTPUT
            echo "AZURE_OPENAI_API_KEY=${{ secrets.PROD_AZURE_OPENAI_API_KEY }}" >> $GITHUB_OUTPUT
            echo "OPENAI_API_VERSION=${{ secrets.PROD_OPENAI_API_VERSION }}" >> $GITHUB_OUTPUT
            echo "OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }}" >> $GITHUB_OUTPUT
            echo "OPENAI_BASE_URL=${{ secrets.PROD_OPENAI_BASE_URL }}" >> $GITHUB_OUTPUT
            echo "ANTHROPIC_BASE_URL=${{ secrets.PROD_ANTHROPIC_BASE_URL }}" >> $GITHUB_OUTPUT
            echo "ANTHROPIC_API_KEY=${{ secrets.PROD_ANTHROPIC_API_KEY }}" >> $GITHUB_OUTPUT
            echo "ANTHROPIC_BEDROCK_BASE_URL=${{ secrets.PROD_ANTHROPIC_BEDROCK_BASE_URL }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_ACCESS_KEY=${{ secrets.PROD_AWS_BEDROCK_ACCESS_KEY }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_SECRET_KEY=${{ secrets.PROD_AWS_BEDROCK_SECRET_KEY }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_SESSION_TOKEN=${{ secrets.PROD_AWS_BEDROCK_SESSION_TOKEN }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_REGION=${{ secrets.PROD_AWS_BEDROCK_REGION }}" >> $GITHUB_OUTPUT
            echo "ENABLE_SENTRY=${{ secrets.PROD_ENABLE_SENTRY }}" >> $GITHUB_OUTPUT
            echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "Deploying to production environment"
          else
            echo "SERVER=${{ secrets.DEV_SERVER_IP }}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME=${{ secrets.DEV_IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "APP_PASSCODE_KEY=${{ secrets.DEV_APP_PASSCODE_KEY }}" >> $GITHUB_OUTPUT
            echo "DEFAULT_API_PROVIDER=${{ secrets.DEV_DEFAULT_API_PROVIDER }}" >> $GITHUB_OUTPUT
            echo "DEFAULT_MODEL=${{ secrets.DEV_DEFAULT_MODEL }}" >> $GITHUB_OUTPUT
            echo "AZURE_OPENAI_API_KEY=${{ secrets.DEV_AZURE_OPENAI_API_KEY }}" >> $GITHUB_OUTPUT
            echo "OPENAI_API_VERSION=${{ secrets.DEV_OPENAI_API_VERSION }}" >> $GITHUB_OUTPUT
            echo "OPENAI_API_KEY=${{ secrets.DEV_OPENAI_API_KEY }}" >> $GITHUB_OUTPUT
            echo "OPENAI_BASE_URL=${{ secrets.DEV_OPENAI_BASE_URL }}" >> $GITHUB_OUTPUT
            echo "ANTHROPIC_BASE_URL=${{ secrets.DEV_ANTHROPIC_BASE_URL }}" >> $GITHUB_OUTPUT
            echo "ANTHROPIC_API_KEY=${{ secrets.DEV_ANTHROPIC_API_KEY }}" >> $GITHUB_OUTPUT
            echo "ANTHROPIC_BEDROCK_BASE_URL=${{ secrets.DEV_ANTHROPIC_BEDROCK_BASE_URL }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_ACCESS_KEY=${{ secrets.DEV_AWS_BEDROCK_ACCESS_KEY }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_SECRET_KEY=${{ secrets.DEV_AWS_BEDROCK_SECRET_KEY }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_SESSION_TOKEN=${{ secrets.DEV_AWS_BEDROCK_SESSION_TOKEN }}" >> $GITHUB_OUTPUT
            echo "AWS_BEDROCK_REGION=${{ secrets.DEV_AWS_BEDROCK_REGION }}" >> $GITHUB_OUTPUT
            echo "ENABLE_SENTRY=${{ secrets.DEV_ENABLE_SENTRY }}" >> $GITHUB_OUTPUT
            echo "SENTRY_ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "Deploying to development environment"
          fi

      - name: Get EC2 Instance ID
        id: get-instance-id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=network-interface.addresses.private-ip-address,Values=${{ steps.deploy-vars.outputs.SERVER }}" \
            --query "Reservations[].Instances[].[InstanceId]" \
            --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "Instance ID not found!"
            exit 1
          fi

          echo "::add-mask::$INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Start SSM Port Forwarding
        id: start-ssm
        run: |
          LOCAL_PORT=$(shuf -i 2000-65000 -n 1)
          echo "::add-mask::$LOCAL_PORT"
          echo "LOCAL_PORT=$LOCAL_PORT" >> $GITHUB_ENV

          aws ssm start-session \
            --target "$INSTANCE_ID" \
            --document-name "AWS-StartPortForwardingSession" \
            --parameters "{\"portNumber\":[\"22\"], \"localPortNumber\":[\"$LOCAL_PORT\"]}" &

          SSM_PID=$!
          echo "::add-mask::$SSM_PID"
          echo "SSM_PID=$SSM_PID" >> $GITHUB_ENV
          sleep 5

      - name: Retrieve SSH key from AWS Secrets Manager
        id: ssh-key
        run: |
          # Create temporary file for SSH key
          SSH_KEY_FILE=$(mktemp)
          echo "::add-mask::$SSH_KEY_FILE"
          echo "SSH_KEY_FILE=$SSH_KEY_FILE" >> $GITHUB_ENV

          # Fetch the SSH key
          aws secretsmanager get-secret-value --secret-id jarvis-keypair --query SecretString --output text > $SSH_KEY_FILE
          chmod 600 $SSH_KEY_FILE

      - name: Copy deployment script to server
        run: |
          scp -o StrictHostKeyChecking=no -P ${{env.LOCAL_PORT}} -i ${{ env.SSH_KEY_FILE }} .github/scripts/ec2-deploy.sh ${{ secrets.SSH_USER }}@localhost:/home/${{ secrets.SSH_USER }}/ec2-deploy.sh

      - name: Deploy to EC2 instance
        run: |
          # Get AWS account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

          ssh -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_FILE }} ${{ secrets.SSH_USER }}@localhost -p ${{ env.LOCAL_PORT }} "
            export IMAGE_NAME=\"${{ steps.deploy-vars.outputs.IMAGE_NAME }}\"
            export TAG=\"${{ github.sha }}\"
            export AWS_ACCOUNT_ID=\"${AWS_ACCOUNT_ID}\"
            export APP_PASSCODE_KEY=\"${{ steps.deploy-vars.outputs.APP_PASSCODE_KEY }}\"
            export DEFAULT_API_PROVIDER=\"${{ steps.deploy-vars.outputs.DEFAULT_API_PROVIDER }}\"
            export DEFAULT_MODEL=\"${{ steps.deploy-vars.outputs.DEFAULT_MODEL }}\"
            export AZURE_OPENAI_API_KEY=\"${{ steps.deploy-vars.outputs.AZURE_OPENAI_API_KEY }}\"
            export OPENAI_API_VERSION=\"${{ steps.deploy-vars.outputs.OPENAI_API_VERSION }}\"
            export OPENAI_API_KEY=\"${{ steps.deploy-vars.outputs.OPENAI_API_KEY }}\"
            export OPENAI_BASE_URL=\"${{ steps.deploy-vars.outputs.OPENAI_BASE_URL }}\"
            export ANTHROPIC_BASE_URL=\"${{ steps.deploy-vars.outputs.ANTHROPIC_BASE_URL }}\"
            export ANTHROPIC_API_KEY=\"${{ steps.deploy-vars.outputs.ANTHROPIC_API_KEY }}\"
            export ANTHROPIC_BEDROCK_BASE_URL=\"${{ steps.deploy-vars.outputs.ANTHROPIC_BEDROCK_BASE_URL }}\"
            export AWS_BEDROCK_ACCESS_KEY=\"${{ steps.deploy-vars.outputs.AWS_BEDROCK_ACCESS_KEY }}\"
            export AWS_BEDROCK_SECRET_KEY=\"${{ steps.deploy-vars.outputs.AWS_BEDROCK_SECRET_KEY }}\"
            export AWS_BEDROCK_SESSION_TOKEN=\"${{ steps.deploy-vars.outputs.AWS_BEDROCK_SESSION_TOKEN }}\"
            export AWS_BEDROCK_REGION=\"${{ steps.deploy-vars.outputs.AWS_BEDROCK_REGION }}\"
            export ENABLE_SENTRY=\"${{ steps.deploy-vars.outputs.ENABLE_SENTRY }}\"
            export SENTRY_DSN=\"${{ secrets.SENTRY_DSN }}\"
            export SENTRY_ENVIRONMENT=\"${{ steps.deploy-vars.outputs.SENTRY_ENVIRONMENT }}\"
            export SENTRY_RELEASE=\"${{ github.sha }}\"
            export AWS_DEFAULT_REGION=\"${{ secrets.AWS_DEFAULT_REGION  }}\"
            export UI_LOGGER_NAME=\"${{ secrets.UI_LOGGER_NAME }}\"
            chmod +x ec2-deploy.sh
            ./ec2-deploy.sh
          "

      - name: Cleanup SSM Sessions
        run: |
          SESSION_IDS=$(aws ssm describe-sessions --state Active --query "Sessions[?Target=='$INSTANCE_ID'].SessionId" --output text)

          if [[ -n "$SESSION_IDS" ]]; then
              for SESSION_ID in $SESSION_IDS; do
                  aws ssm terminate-session --session-id "$SESSION_ID" || true
              done
          else
              echo "No active SSM sessions found."
          fi

          if ps -p $SSM_PID > /dev/null; then
              echo "Terminating SSM port forwarding..."
              kill -9 $SSM_PID || true
          fi

      - name: Clean up temporary files
        if: always()
        run: |
          # Clean up temporary files
          if [[ -f "${{ env.SSH_KEY_FILE }}" ]]; then
            rm -f ${{ env.SSH_KEY_FILE }}
          fi
